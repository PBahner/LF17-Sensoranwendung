{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Schulung zur Pr\u00fcfungsvorbereitung","text":"<p>Im Rahmen der dualen Berufsausbildung mit Abitur (DuBas) wurde im Fach Informatiksysteme ein Projekt durchgef\u00fchrt. Das Projekt ist Bestandteil des Lehrplaninhalts LF 17 \"Kundenspezifische Anwendungsentwicklung projektorientiert durchf\u00fchren\". Das Projekt wurde in Form einer Schulung durch die Sch\u00fcler vorbereitet und dient ihnen und ihren Mitsch\u00fclern zur Vorbereitung auf die Abitur- und IHK-Pr\u00fcfung 2025.</p> <p>Wir begr\u00fc\u00dfen alle Sch\u00fcler, G\u00e4ste und Lehrer zu unserer Schulung im Fach Informatiksysteme.</p>"},{"location":"#ubersicht","title":"\u00dcbersicht","text":"<p>Diese Schulung behandelt folgende 3 verschiedene Hauptschwerpunkte. Die Schwerpunktthemen ergeben sich aus der Aufgabe 2 der Abiturpr\u00fcfung 2021 im Fach LK-Informatiksysteme.</p> <ol> <li>Klassenbeziehungen</li> <li>Softwarearchitekturmodelle</li> <li>IT-Sicherheit und Datenschutz</li> </ol>"},{"location":"#installation-einrichtung","title":"Installation / Einrichtung","text":"<p>Die Datei schik.ps1 in einen leeren Ordner kopieren. Rechtsklick auf die Datei und \"mit Powershell ausf\u00fchren\".</p>"},{"location":"#fur-mkdocs","title":"F\u00fcr MkDocs","text":"<pre><code>cd mkdocs\nmkdocs serve\n</code></pre>"},{"location":"#fur-die-sensor-anwendung","title":"F\u00fcr die Sensor-Anwendung","text":"<p>In PyCharm oben rechts die Ausf\u00fchrungskonfiguration (\"Edit Configurations\") bearbeiten und die Einstellung auf \"module\" und \"lf17_sensor\" setzen (siehe Screenshot). Mit dem gr\u00fcnen Pfeil die Anwendung ausf\u00fchren.</p> <p></p>"},{"location":"#projekt","title":"Projekt","text":"<p>Die Anwendung ist eine Beispielanwendung, welche auf der oben genannten Pr\u00fcfungsaufgabe basiert. Die Anwendung erm\u00f6glicht das Simulieren und Verarbeiten von Sensordaten. Die Umsetzung wurde nach dem MVC-Prinzip durchgef\u00fchrt.</p> <ul> <li>Simulierte Sensordaten (zuf\u00e4lliges Generieren).</li> <li>Einbinden von Wettervorhersage-Daten</li> <li>Einfache Benutzeroberfl\u00e4che zur Visualisierung der Sensordaten.</li> </ul>"},{"location":"#auswertung","title":"Auswertung","text":"<p>Google Forms</p>"},{"location":"01_aufgaben/","title":"\u00dcbungsaufgaben","text":"<p>Zur\u00fcck zur Info-Seite</p> <p>Nachfolgend finden Sie verschiedene \u00dcbungsaufgaben, die sich auf die Themen Assoziation, Aggregation,  Komposition und Vererbung (inklusive der Verwendung von <code>super()</code>) beziehen.</p>"},{"location":"01_aufgaben/#1-assoziation","title":"1. Assoziation","text":"<p>Aufgabe: Erstellen Sie zwei Klassen, die \u00fcber eine Assoziation miteinander verkn\u00fcpft sind. Achten Sie darauf, dass die eine Klasse keinen Besitzanspruch an die andere Klasse hat, sondern lediglich eine (optionale) Referenz darauf h\u00e4lt.</p> <ol> <li>Definieren Sie beispielsweise die Klassen <code>Order</code> und <code>Customer</code>.  </li> <li>Sorgen Sie daf\u00fcr, dass <code>Order</code> optional auf einen <code>Customer</code> verweisen kann (z. B. <code>set_customer</code> / <code>get_customer</code>).</li> <li>Implementieren Sie eine Methode, die pr\u00fcft, ob ein <code>Order</code>-Objekt einen g\u00fcltigen <code>Customer</code> hat, und geben Sie das    Ergebnis als Text (z. B. <code>\"Hat Kunden\"</code> / <code>\"Hat keinen Kunden\"</code>) aus.</li> <li>Testen Sie Ihr Programm, indem Sie sowohl einen <code>Order</code> ohne Kunden als auch einen <code>Order</code> mit Kunde erstellen.</li> </ol> <p>Erweiterung: - F\u00fcgen Sie eine zweite Klasse hinzu, zum Beispiel <code>ShippingAddress</code>, die von <code>Order</code> referenziert wird, und verdeutlichen   Sie damit, dass mehrere Assoziationen gleichzeitig existieren k\u00f6nnen.</p>"},{"location":"01_aufgaben/#2-aggregation","title":"2. Aggregation","text":"<p>Aufgabe: Erstellen Sie eine Aggregation, bei der eine Klasse eine Liste von Objekten einer anderen Klasse verwaltet. Ein m\u00f6gliches Szenario w\u00e4re zum Beispiel eine <code>Garage</code>, in der sich mehrere <code>Car</code>-Objekte befinden.</p> <ol> <li>Legen Sie die Klassen <code>Garage</code> und <code>Car</code> an.  </li> <li>Implementieren Sie in der Klasse <code>Garage</code> Methoden, um <code>Car</code>-Objekte zur Liste hinzuzuf\u00fcgen und zu entfernen.  </li> <li>Schreiben Sie eine Methode, die alle vorhandenen <code>Car</code>-Objekte (z. B. \u00fcber <code>__str__</code> in Python) ausgibt.  </li> <li>Testen Sie das Programm, indem Sie mehrere <code>Car</code>-Objekte erstellen, sie in die <code>Garage</code> legen und die Ausgabe    kontrollieren.</li> </ol> <p>Erweiterung: - F\u00fcgen Sie eine zus\u00e4tzliche Klasse <code>Bike</code> hinzu, die ebenfalls in dieselbe <code>Garage</code> aufgenommen werden kann. - Pr\u00fcfen Sie, wie Sie die Verwaltung der Objekte am besten organisieren: z. B. eine Liste f\u00fcr alle Fahrzeuge, oder   getrennte Listen f\u00fcr verschiedene Typen von Fahrzeugen?</p>"},{"location":"01_aufgaben/#3-komposition","title":"3. Komposition","text":"<p>Aufgabe: Erstellen Sie eine Komposition, bei der das enthaltene Objekt nur in Zusammenhang mit dem \u00fcbergeordneten Objekt  existieren kann. Ein m\u00f6gliches Szenario k\u00f6nnte z. B. ein <code>House</code> sein, das immer genau ein <code>Door</code>-Objekt besitzt.  Sobald das <code>House</code> zerst\u00f6rt wird, existiert auch die <code>Door</code> nicht mehr.</p> <ol> <li>Definieren Sie die Klasse <code>House</code>, die im Konstruktor ein <code>Door</code>-Objekt anlegt.  </li> <li>Definieren Sie die Klasse <code>Door</code>, die \u00fcber eine einfache Eigenschaft (z. B. Farbe oder Material) verf\u00fcgt.  </li> <li>Implementieren Sie in der Klasse <code>House</code> Methoden, um auf die Eigenschaften des <code>Door</code>-Objekts zuzugreifen (z. B.    <code>open_door</code>, <code>close_door</code> oder einfach <code>get_door_color</code>).  </li> <li>Testen Sie das Programm, indem Sie ein <code>House</code>-Objekt erstellen und die Eigenschaften oder Methoden des    <code>Door</code>-Objekts aufrufen.</li> </ol> <p>Erweiterung: - F\u00fcgen Sie weitere Kompositionen in der Klasse <code>House</code> hinzu, z. B. ein <code>Roof</code>, das ebenfalls nur in Verbindung mit   dem <code>House</code> existiert. - Stellen Sie sich vor, das <code>House</code> kann optional mehr als eine <code>Door</code> haben (z. B. Haust\u00fcr, Hintert\u00fcr). Diskutieren Sie:   Handelt es sich dann noch um Komposition oder eher um Aggregation?</p>"},{"location":"01_aufgaben/#4-vererbung","title":"4. Vererbung","text":"<p>Aufgabe: Demonstrieren Sie Vererbung, indem Sie eine Basisklasse und mindestens eine abgeleitete Klasse erstellen. Als Beispiel  kann eine Basisklasse <code>Animal</code> dienen, von der Klassen wie <code>Dog</code> und <code>Cat</code> erben. </p> <ol> <li>Erstellen Sie eine Basisklasse <code>Animal</code> mit Methoden wie <code>make_sound()</code> und einer Eigenschaft <code>name</code>.  </li> <li>Erstellen Sie eine abgeleitete Klasse <code>Dog</code>, die die Methoden und Eigenschaften von <code>Animal</code> erbt.  </li> <li>\u00dcberschreiben Sie <code>make_sound()</code> in <code>Dog</code> mit einer spezifischen Ausgabe (z. B. <code>\"Wuff\"</code>).  </li> <li>Instanziieren Sie Objekte von beiden Klassen und rufen Sie die jeweilige <code>make_sound()</code>-Methode auf.</li> </ol> <p>Erweiterung: - Erstellen Sie eine weitere abgeleitete Klasse <code>Cat</code> und \u00fcberschreiben Sie <code>make_sound()</code> ebenfalls. - Experimentieren Sie mit Mehrfachvererbung (falls Ihre Programmiersprache dies erlaubt) und beobachten Sie, wie    die Method Resolution Order (MRO) in Python wirkt.</p>"},{"location":"01_aufgaben/#5-verwendung-von-super","title":"5. Verwendung von <code>super()</code>","text":"<p>Aufgabe: Vertiefen Sie den Einsatz von <code>super()</code>, indem Sie den Konstruktor der Basisklasse explizit aus einer  abgeleiteten Klasse aufrufen und dort zus\u00e4tzliche Initialisierungen vornehmen.</p> <ol> <li>Erstellen Sie eine Basisklasse <code>Book</code> mit Eigenschaften wie <code>title</code> und <code>author</code>.  </li> <li>Definieren Sie eine abgeleitete Klasse <code>EBook</code>, die zus\u00e4tzlich eine Eigenschaft wie <code>file_size</code> besitzt.  </li> <li>Rufen Sie im Konstruktor von <code>EBook</code> den Basisklassen-Konstruktor mit <code>super().__init__(title, author)</code> auf,     bevor Sie <code>file_size</code> setzen.  </li> <li>Legen Sie in einer Testmethode ein Objekt <code>EBook</code> an, geben Sie alle Eigenschaften aus und \u00fcberpr\u00fcfen Sie,     ob diese korrekt gesetzt wurden.</li> </ol> <p>Erweiterung: - F\u00fcgen Sie eine Methode in der Basisklasse hinzu (z. B. <code>read()</code>), die in der abgeleiteten Klasse <code>EBook</code>    \u00fcberschrieben wird. Rufen Sie innerhalb der neuen Methode in <code>EBook</code> wieder die originale Methode mit    <code>super().read()</code> auf, um sicherzustellen, dass der Basisklassen-Code ebenfalls ausgef\u00fchrt wird.</p>"},{"location":"01_aufgaben/#6-zusammenfuhrung-aller-konzepte","title":"6. Zusammenf\u00fchrung aller Konzepte","text":"<p>Aufgabe (Projektaufgabe): Entwerfen Sie ein kleines System, das Assoziation, Aggregation, Komposition und Vererbung miteinander vereint.  Ein m\u00f6gliches Szenario:</p> <ul> <li>Erstellen Sie eine Basisklasse <code>Sensor</code> und eine davon abgeleitete Klasse <code>TemperatureSensor</code>.  </li> <li>Eine Klasse <code>SensorManager</code> aggregiert mehrere <code>Sensor</code>-Objekte (Liste).  </li> <li>Eine Klasse <code>Device</code> besitzt \u00fcber Komposition genau einen <code>SensorManager</code>.  </li> <li>Eine Klasse <code>User</code> ist lediglich assoziiert mit dem <code>Device</code>, da der Benutzer \u00fcber ein Interface auf das <code>Device</code> zugreift    (z. B. <code>User.set_device(device)</code> und <code>User.configure_device()</code>).</li> </ul> <p>Ziel ist es, anhand dieses Szenarios die verschiedenen Beziehungen und die Vererbung in einer Anwendung zu demonstrieren.</p> <p>Hinweise f\u00fcr die Umsetzung:</p> <ol> <li>Skizzieren Sie zun\u00e4chst ein Klassendiagramm, um die Beziehungen zu verdeutlichen.  </li> <li>Implementieren Sie die Klassen Schritt f\u00fcr Schritt und testen Sie die Methoden.  </li> <li>Diskutieren Sie in kleinen Kommentaren im Code, warum es sich bei den Beziehungen um Assoziation, Aggregation oder     Komposition handelt und an welcher Stelle Vererbung zum Einsatz kommt.  </li> </ol> <p>Viel Erfolg bei der Bearbeitung der \u00dcbungsaufgaben! Nutzen Sie die Beispiele aus dem Hauptdokument zur Orientierung und versuchen Sie, die Konzepte auf eigene  Anwendungsf\u00e4lle zu \u00fcbertragen. Dadurch gewinnen Sie praktische Erfahrung in der Anwendung von Assoziation, Aggregation,  Komposition und Vererbung, einschlie\u00dflich der sicheren Verwendung von <code>super()</code>.</p> <p>Zur\u00fcck zur Info-Seite</p>"},{"location":"01_index/","title":"--> Abituraufgabe","text":"<p>Am Ende dieses Schwerpunkt-Kapitels sollst du die folgende Aufgabe aus der schriftlichen Abiturpr\u00fcfung 2021 Informatiksysteme (15.0.1E) l\u00f6sen k\u00f6nnen:</p>"},{"location":"01_index/#aufgabe-22-2-be","title":"Aufgabe 2.2 (2 BE)","text":"<p>Erkl\u00e4ren Sie die beiden Klassenbeziehungen im Modell und ihre typische Umsetzung bei der Implementierung.</p> <p></p>"},{"location":"01_lsg/","title":"Musterl\u00f6sungen mit <code>main()</code>-Funktionen","text":"<p>Zur\u00fcck zur Info-Seite</p> <p>Im Folgenden finden Sie die angepassten Musterl\u00f6sungen, in denen die Inhalte der bisherigen  <code>if __name__ == \"__main__\": ...</code>-Bl\u00f6cke in eine separate <code>main()</code>-Funktion ausgelagert wurden. Diese wird am Ende jeweils aus <code>if __name__ == \"__main__\": main()</code> aufgerufen.</p>"},{"location":"01_lsg/#1-assoziation","title":"1. Assoziation","text":"<pre><code>from typing import Optional\n\nclass Customer:\n    __name: str\n\n    def __init__(self, name: str) -&gt; None:\n        self.__name = name\n\n    def get_name(self) -&gt; str:\n        return self.__name\n\n\nclass Order:\n    __customer: Optional[Customer]\n\n    def __init__(self) -&gt; None:\n        # Eine Order hat zun\u00e4chst keinen Customer (Assoziation ist optional)\n        self.__customer = None\n\n    def set_customer(self, customer: Optional[Customer]) -&gt; None:\n        self.__customer = customer\n\n    def get_customer(self) -&gt; Optional[Customer]:\n        return self.__customer\n\n    def check_customer_status(self) -&gt; str:\n        if self.__customer is None:\n            return \"Hat keinen Kunden\"\n        else:\n            return f\"Hat Kunden: {self.__customer.get_name()}\"\n\n\ndef main() -&gt; None:\n    # Test der L\u00f6sung\n    bestellung_ohne_kunde = Order()\n    print(bestellung_ohne_kunde.check_customer_status())  # \"Hat keinen Kunden\"\n\n    kunde = Customer(\"Max Mustermann\")\n    bestellung_mit_kunde = Order()\n    bestellung_mit_kunde.set_customer(kunde)\n    print(bestellung_mit_kunde.check_customer_status())   # \"Hat Kunden: Max Mustermann\"\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"01_lsg/#2-aggregation","title":"2. Aggregation","text":"<pre><code>from typing import List\n\nclass Car:\n    __license_plate: str\n\n    def __init__(self, license_plate: str) -&gt; None:\n        self.__license_plate = license_plate\n\n    def get_license_plate(self) -&gt; str:\n        return self.__license_plate\n\n\nclass Garage:\n    __cars: List[Car]\n\n    def __init__(self) -&gt; None:\n        self.__cars = []\n\n    def add_car(self, car: Car) -&gt; None:\n        self.__cars.append(car)\n\n    def remove_car(self, car: Car) -&gt; None:\n        if car in self.__cars:\n            self.__cars.remove(car)\n\n    def list_cars(self) -&gt; None:\n        if not self.__cars:\n            print(\"Keine Autos in der Garage.\")\n        else:\n            for car in self.__cars:\n                print(f\"Auto mit Kennzeichen: {car.get_license_plate()}\")\n\n\ndef main() -&gt; None:\n    # Test der L\u00f6sung\n    garage = Garage()\n    auto1 = Car(\"B-AB 123\")\n    auto2 = Car(\"M-XY 987\")\n\n    garage.add_car(auto1)\n    garage.add_car(auto2)\n    garage.list_cars()\n\n    garage.remove_car(auto1)\n    garage.list_cars()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"01_lsg/#3-komposition","title":"3. Komposition","text":"<pre><code>class Door:\n    __color: str\n\n    def __init__(self, color: str) -&gt; None:\n        self.__color = color\n\n    def get_color(self) -&gt; str:\n        return self.__color\n\n\nclass House:\n    __door: Door\n\n    def __init__(self) -&gt; None:\n        # Komposition: Das House erstellt die Door selbst.\n        # Ohne House existiert diese Door nicht.\n        self.__door = Door(\"Braun\")\n\n    def get_door_color(self) -&gt; str:\n        return self.__door.get_color()\n\n\ndef main() -&gt; None:\n    # Test der L\u00f6sung\n    haus = House()\n    print(f\"Die T\u00fcrfarbe ist: {haus.get_door_color()}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"01_lsg/#4-vererbung","title":"4. Vererbung","text":"<pre><code>class Animal:\n    __name: str\n\n    def __init__(self, name: str) -&gt; None:\n        self.__name = name\n\n    def get_name(self) -&gt; str:\n        return self.__name\n\n    def make_sound(self) -&gt; None:\n        print(\"Unbekanntes Ger\u00e4usch\")\n\n\nclass Dog(Animal):\n    def make_sound(self) -&gt; None:\n        print(\"Wuff\")\n\n\nclass Cat(Animal):\n    def make_sound(self) -&gt; None:\n        print(\"Miau\")\n\n\ndef main() -&gt; None:\n    # Test der L\u00f6sung\n    tier1 = Animal(\"Irgendein Tier\")\n    tier1.make_sound()  # \"Unbekanntes Ger\u00e4usch\"\n\n    hund = Dog(\"Bello\")\n    hund.make_sound()   # \"Wuff\"\n\n    katze = Cat(\"Luna\")\n    katze.make_sound()  # \"Miau\"\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"01_lsg/#5-verwendung-von-super","title":"5. Verwendung von <code>super()</code>","text":"<pre><code>class Book:\n    __title: str\n    __author: str\n\n    def __init__(self, title: str, author: str) -&gt; None:\n        self.__title = title\n        self.__author = author\n\n    def get_title(self) -&gt; str:\n        return self.__title\n\n    def get_author(self) -&gt; str:\n        return self.__author\n\n    def read(self) -&gt; None:\n        print(f\"Lese '{self.__title}' von {self.__author}.\")\n\n\nclass EBook(Book):\n    __file_size: float\n\n    def __init__(self, title: str, author: str, file_size: float) -&gt; None:\n        # Aufruf des Basisklassen-Konstruktors\n        super().__init__(title, author)\n        self.__file_size = file_size\n\n    def get_file_size(self) -&gt; float:\n        return self.__file_size\n\n    def read(self) -&gt; None:\n        # Rufe zun\u00e4chst die Basisklassenmethode auf\n        super().read()\n        print(\"Auf dem E-Reader wird das Buch digital dargestellt.\")\n\n\ndef main() -&gt; None:\n    # Test der L\u00f6sung\n    normales_buch = Book(\"1984\", \"George Orwell\")\n    normales_buch.read()\n\n    ebook = EBook(\"Brave New World\", \"Aldous Huxley\", 2.5)\n    ebook.read()\n    print(f\"Dateigr\u00f6\u00dfe: {ebook.get_file_size()}MB\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"01_lsg/#6-zusammenfuhrung-aller-konzepte","title":"6. Zusammenf\u00fchrung aller Konzepte","text":"<pre><code>classDiagram\n    class Sensor{\n        -bool __connected\n        +connect()\n        +disconnect()\n        +is_connected() bool\n    }\n    Sensor &lt;|-- TemperatureSensor : Vererbung\n    class TemperatureSensor{\n        -float __temperature\n        +get_temperature() float\n        +set_temperature(float temperature)\n    }\n\n    class SensorManager {\n        -List~Sensor~ __sensors\n        +add_sensor(Sensor sensor)\n        +remove_sensor(Sensor sensor)\n        +get_all_sensors() List~Sensor~\n    }\n    SensorManager o-- Sensor : Aggregation\n\n    class Device {\n        -SensorManager __sensor_manager\n        +get_sensor_manager() SensorManager\n    }\n    Device *-- SensorManager : Komposition\n\n    class User {\n        -Device __device\n        +set_device(Device device)\n        +configure_device()\n    }\n    User --&gt; Device : Assoziation</code></pre> <pre><code>from typing import List, Optional\n\n# ----------------------\n# Vererbung\n# ----------------------\nclass Sensor:\n    __connected: bool\n\n    def __init__(self) -&gt; None:\n        self.__connected = False\n\n    def connect(self) -&gt; None:\n        self.__connected = True\n\n    def disconnect(self) -&gt; None:\n        self.__connected = False\n\n    def is_connected(self) -&gt; bool:\n        return self.__connected\n\n\nclass TemperatureSensor(Sensor):\n    __temperature: float\n\n    def __init__(self) -&gt; None:\n        super().__init__()\n        self.__temperature = 0.0\n\n    def get_temperature(self) -&gt; float:\n        return self.__temperature\n\n    def set_temperature(self, value: float) -&gt; None:\n        self.__temperature = value\n\n\n# ----------------------\n# Aggregation\n# ----------------------\nclass SensorManager:\n    __sensors: List[Sensor]\n\n    def __init__(self) -&gt; None:\n        self.__sensors = []\n\n    def add_sensor(self, sensor: Sensor) -&gt; None:\n        self.__sensors.append(sensor)\n\n    def remove_sensor(self, sensor: Sensor) -&gt; None:\n        if sensor in self.__sensors:\n            self.__sensors.remove(sensor)\n\n    def get_all_sensors(self) -&gt; List[Sensor]:\n        return self.__sensors\n\n\n# ----------------------\n# Komposition\n# ----------------------\nclass Device:\n    __sensor_manager: SensorManager\n\n    def __init__(self) -&gt; None:\n        # Komposition: Ein Device erstellt den SensorManager selbst.\n        self.__sensor_manager = SensorManager()\n\n    def get_sensor_manager(self) -&gt; SensorManager:\n        return self.__sensor_manager\n\n\n# ----------------------\n# Assoziation\n# ----------------------\nclass User:\n    __device: Optional[Device]\n\n    def __init__(self) -&gt; None:\n        self.__device = None\n\n    def set_device(self, device: Optional[Device]) -&gt; None:\n        self.__device = device\n\n    def configure_device(self) -&gt; None:\n        if self.__device is None:\n            print(\"Kein Ger\u00e4t verbunden.\")\n        else:\n            sensor_manager = self.__device.get_sensor_manager()\n            # Beispiel: Alle Sensoren im Ger\u00e4t verbinden\n            for sensor in sensor_manager.get_all_sensors():\n                sensor.connect()\n            print(\"Alle Sensoren wurden konfiguriert und verbunden.\")\n\n\ndef main() -&gt; None:\n    # Erstelle User und Device\n    user = User()\n    device = Device()\n\n    # F\u00fcge dem Device (via SensorManager) mehrere Sensoren hinzu\n    temp_sensor_1 = TemperatureSensor()\n    temp_sensor_2 = TemperatureSensor()\n    temp_sensor_2.set_temperature(36.6)\n\n    sensor_manager = device.get_sensor_manager()\n    sensor_manager.add_sensor(temp_sensor_1)\n    sensor_manager.add_sensor(temp_sensor_2)\n\n    # Assoziation: User setzt ein Device\n    user.set_device(device)\n    user.configure_device()\n\n    # Sensorstatus pr\u00fcfen\n    for sensor in sensor_manager.get_all_sensors():\n        print(f\"Sensor connected? {sensor.is_connected()}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Hinweis: Die gezeigten L\u00f6sungen dienen als Beispiel und k\u00f6nnen je nach Anforderung oder Projektrichtlinien nat\u00fcrlich  angepasst werden. Wichtig ist das Grundprinzip, in dem die zuvor autark stehenden Tests im Hauptprogramm  nun in eine <code>main()</code>-Funktion \u00fcberf\u00fchrt werden, um saubere Einstiegspunkte zu definieren. Zur\u00fcck zur Info-Seite</p>"},{"location":"01_wdh/","title":"Klassenbeziehungen","text":"<p>Zu den Aufgaben</p>"},{"location":"01_wdh/#assoziation","title":"Assoziation","text":"<p>Eine Assoziation beschreibt eine Verbindung zwischen zwei Objekten unterschiedlicher Klassen. Diese Beziehung impliziert keine Ownership, sondern lediglich eine Verkn\u00fcpfung, die das Interagieren von Objekten erm\u00f6glicht.</p> <p>Im folgenden Beispiel hat der <code>MemController</code> Zugriff auf ein oder kein <code>Component</code>-Objekt. Die Methode <code>set_connected</code> im <code>MemController</code> sorgt daf\u00fcr, dass dieser mit dem <code>Component</code>-Objekt kommuniziert.</p> <pre><code>classDiagram\n    MemController &lt;-- Component\n\n    class Component {\n       -bool __connected\n       +get_connected() bool\n       +set_connected(bool connected)\n    }\n\n    class MemController {\n        -Optional~Component~ __component\n        +set_component(Optional~Component~ component)\n        +set_connected(bool connected)\n    }</code></pre>"},{"location":"01_wdh/#beispiel-in-python","title":"Beispiel in Python:","text":"<pre><code>from typing import Optional\n\nclass Component:\n    __connected: bool\n\n    def __init__(self) -&gt; None:\n        self.__connected = False\n\n    def get_connected(self) -&gt; bool:\n        return self.__connected\n\n    def set_connected(self, connected: bool) -&gt; None:\n        self.__connected = connected\n\n\nclass MemController:\n    __component: Optional[Component]\n\n    def __init__(self) -&gt; None:\n        self.__component = None\n\n    def set_component(self, component: Optional[Component]) -&gt; None:\n        self.__component = component\n\n    def set_connected(self, connected: bool) -&gt; None:\n        if self.__component is not None:\n            self.__component.set_connected(connected)\n</code></pre> <p>In diesem Fall kann der <code>MemController</code> \u00fcber die Methode <code>set_component</code> eine Referenz zu einem <code>Component</code>-Objekt setzen oder l\u00f6schen. Die Methode <code>set_connected</code> erm\u00f6glicht die Steuerung der Verbindung des <code>Component</code>-Objekts.</p>"},{"location":"01_wdh/#aggregation","title":"Aggregation","text":"<p>Eine Aggregation stellt eine \"Teil-Ganzes\"-Beziehung dar, bei der ein Objekt eine Sammlung von Objekten einer anderen Klasse verwaltet. Im Gegensatz zur Komposition existieren die enthaltenen Objekte unabh\u00e4ngig von der aggregierenden Klasse.</p> <p>Im folgenden Beispiel kann ein <code>MemController</code>-Objekt mehrere <code>Component</code>-Objekte verwalten und deren Verbindungsstatus steuern.</p> <pre><code>classDiagram\n    MemController o-- Component\n\n    class Component {\n       -bool __connected\n       +get_connected() bool\n       +set_connected(bool connected)\n    }\n\n    class MemController {\n        -List~Component~ __components\n        +add_component(Component component)\n        +set_connected(bool connected)\n    }</code></pre>"},{"location":"01_wdh/#beispiel-in-python_1","title":"Beispiel in Python:","text":"<pre><code>from typing import List\n\nclass Component:\n    __connected: bool\n\n    def __init__(self) -&gt; None:\n        self.__connected = False\n\n    def get_connected(self) -&gt; bool:\n        return self.__connected\n\n    def set_connected(self, connected: bool) -&gt; None:\n        self.__connected = connected\n\n\nclass MemController:\n    __components: List[Component]\n\n    def __init__(self) -&gt; None:\n        self.__components = []\n\n    def add_component(self, component: Component) -&gt; None:\n        self.__components.append(component)\n\n    def set_connected(self, connected: bool) -&gt; None:\n        for component in self.__components:\n            component.set_connected(connected)\n</code></pre> <p>Hier wird dem <code>MemController</code>-Objekt erm\u00f6glicht, eine Liste von <code>Component</code>-Objekten zu verwalten. Die Methode <code>set_connected</code> wird auf jedes <code>Component</code>-Objekt angewendet, das dem <code>MemController</code> hinzugef\u00fcgt wurde.</p>"},{"location":"01_wdh/#komposition","title":"Komposition","text":"<p>Eine Komposition stellt eine starke \"Teil-Ganzes\"-Beziehung dar, bei der die Existenz eines Objekts ohne das andere nicht m\u00f6glich ist. Im Gegensatz zur Aggregation kann das enthaltene Objekt nicht unabh\u00e4ngig existieren.</p> <p>Im folgenden Beispiel hat der <code>MemController</code> ein <code>Component</code>-Objekt, dessen Lebenszyklus direkt vom <code>MemController</code> abh\u00e4ngt.</p> <pre><code>classDiagram\n    MemController *-- Component\n\n    class Component {\n       -bool __connected\n       +get_connected() bool\n       +set_connected(bool connected)\n    }\n\n    class MemController {\n        -Component __component\n        +get_connected(bool connected)\n        +set_connected(bool connected)\n    }</code></pre>"},{"location":"01_wdh/#beispiel-in-python_2","title":"Beispiel in Python:","text":"<pre><code>class Component:\n    __connected: bool\n\n    def __init__(self) -&gt; None:\n        self.__connected = False\n\n    def get_connected(self) -&gt; bool:\n        return self.__connected\n\n    def set_connected(self, connected: bool) -&gt; None:\n        self.__connected = connected\n\n\nclass MemController:\n    __component: Component\n\n    def __init__(self) -&gt; None:\n        self.__component = Component()\n\n    def get_connected(self) -&gt; bool:\n        return self.__component.get_connected()\n\n    def set_connected(self, connected: bool) -&gt; None:\n        if self.__component is not None:\n            self.__component.set_connected(connected)\n</code></pre> <p>In diesem Fall wird das <code>Component</code>-Objekt im Konstruktor des <code>MemController</code>-Objekts instanziiert und ist nur innerhalb des <code>MemController</code> verf\u00fcgbar. Der Lebenszyklus des <code>Component</code>-Objekts h\u00e4ngt somit vollst\u00e4ndig vom <code>MemController</code> ab.</p>"},{"location":"01_wdh/#vererbung","title":"Vererbung","text":"<p>Vererbung ist ein Mechanismus, mit dem eine Klasse Eigenschaften und Methoden einer anderen Klasse erben kann. Dabei unterscheidet man zwischen Schnittstellen- und Implementierungsvererbung. Die Implementierungsvererbung wird hier n\u00e4her erl\u00e4utert.</p> <p>Die Implementierungsvererbung erm\u00f6glicht es einer abgeleiteten Klasse, alle Methoden und Eigenschaften der Basisklasse zu \u00fcbernehmen und bei Bedarf zu erweitern oder zu \u00fcberschreiben.</p> <p>Im folgenden Beispiel wird die Klasse <code>TemperatureComponent</code> von der Klasse <code>Component</code> abgeleitet und erweitert, um spezifische Funktionen zur Temperaturmessung hinzuzuf\u00fcgen.</p> <p></p> <p>** alle nachfolgenden Klassendiagramme mit Vererbung haben aufgrund eines Darstellungsfehlers von Mermaid f\u00e4lschlicherweise einen ausgemalten Pfeil anstelle eines nicht ausgemalten Pfeils bei den Vererbungen.</p>"},{"location":"01_wdh/#beispiel-in-python_3","title":"Beispiel in Python:","text":"<pre><code>class Component:\n    __connected: bool\n\n    def __init__(self) -&gt; None:\n        self.__connected = False\n\n    def get_connected(self) -&gt; bool:\n        return self.__connected\n\n    def set_connected(self, connected: bool) -&gt; None:\n        self.__connected = connected\n\n\nclass TemperatureComponent(Component):\n    __temperature: float\n\n    def __init__(self) -&gt; None:\n        # Aufruf des Konstruktors der Basisklasse\n        super().__init__()\n        self.__temperature = 0.0\n\n    def get_temperature(self) -&gt; float:\n        return self.__temperature\n\n    def set_temperature(self, temperature: float) -&gt; None:\n        self.__temperature = temperature\n</code></pre> <p>In diesem Beispiel erbt die Klasse <code>TemperatureComponent</code> von der Klasse <code>Component</code>. Dadurch \u00fcbernimmt sie die Methoden <code>get_connected</code> und <code>set_connected</code>, und sie f\u00fcgt die Methoden <code>get_temperature</code> und <code>set_temperature</code> hinzu, die spezifisch f\u00fcr Temperaturmessungen sind.</p>"},{"location":"01_wdh/#methodenuberschreibung","title":"Methoden\u00fcberschreibung","text":"<p>Methoden\u00fcberschreibung (Function Overriding) bezeichnet das Ersetzen oder Anpassen einer in der Basisklasse definierten Methode durch eine neue Implementierung in der abgeleiteten Klasse. Wenn ich jetzt also daf\u00fcr sorgen will, dass mein Component, wenn es getrennt wird, auch die Temperatur wieder auf 0 setzt, muss ich f\u00fcr meine abgeleitete Klasse die Funktionalit\u00e4t der <code>set_connected()</code>-Methode erweitern. In vielen Programmiersprachen \u2013 darunter auch Python \u2013 geschieht dies, indem man in der Subklasse eine Methode mit demselben Namen, derselben Parameterliste und einem passenden R\u00fcckgabetyp (soweit anwendbar) definiert. Der Vorteil davon ist, dass man das bereits existierende Verhalten erweitern oder \u00e4ndern kann, ohne die Basisklasse selbst zu ver\u00e4ndern.</p> <p>Im folgenden Beispiel wird in der Klasse <code>TemperatureComponent</code> die Methode <code>set_connected</code> aus der Basisklasse \u00fcberschrieben. Zus\u00e4tzlich wird bei einer Trennung (False) der Temperaturwert automatisch auf 0 zur\u00fcckgesetzt:</p> <pre><code>class Component:\n    __connected: bool\n\n    def __init__(self) -&gt; None:\n        self.__connected = False\n\n    def get_connected(self) -&gt; bool:\n        return self.__connected\n\n    def set_connected(self, connected: bool) -&gt; None:\n        self.__connected = connected\n\n\nclass TemperatureComponent(Component):\n    __temperature: float\n\n    def __init__(self) -&gt; None:\n        super().__init__()\n        self.__temperature = 0.0\n\n    def get_temperature(self) -&gt; float:\n        return self.__temperature\n\n    def set_temperature(self, temperature: float) -&gt; None:\n        self.__temperature = temperature\n\n    # \u00dcberschreiben (Overriding) der Methode set_connected aus der Basisklasse\n    def set_connected(self, connected: bool) -&gt; None:\n        # Aufruf der Basisklassenmethode (falls das Basisverhalten beibehalten werden soll)\n        super().set_connected(connected)\n\n        # Zus\u00e4tzliche Logik in der abgeleiteten Klasse\n        if not connected:\n            # Falls nicht verbunden, setze Temperatur auf 0\n            self.__temperature = 0.0\n</code></pre> <ol> <li>Basisklasse (<code>Component</code>): </li> <li> <p>Enth\u00e4lt eine boolesche Variable <code>__connected</code> und Methoden zum Lesen (<code>get_connected</code>) und Schreiben    (<code>set_connected</code>) dieses Zustands.</p> </li> <li> <p>Abgeleitete Klasse (<code>TemperatureComponent</code>): </p> </li> <li> <p>Erbt den Zustand und die Methoden aus der Basisklasse (etwa <code>get_connected</code>), f\u00fcgt eigene Eigenschaften und    Methoden f\u00fcr die Temperaturmessung hinzu (<code>__temperature</code>, <code>get_temperature</code>, <code>set_temperature</code>).</p> </li> <li> <p>\u00dcberschreibt die Methode <code>set_connected</code>, um beim Aufruf sowohl das urspr\u00fcngliche Verhalten    (<code>super().set_connected(connected)</code>) auszuf\u00fchren als auch zus\u00e4tzliche Schritte (Zur\u00fccksetzen der Temperatur) zu    implementieren.</p> </li> </ol> <p>Die Methoden\u00fcberschreibung erm\u00f6glicht es somit, die Funktionalit\u00e4t der Basisklasse an die Anforderungen der abgeleiteten Klasse anzupassen oder zu erweitern, ohne den Code der Basisklasse selbst \u00e4ndern zu m\u00fcssen. Dadurch wird eine h\u00f6here Flexibilit\u00e4t und Wiederverwendbarkeit erreicht.</p>"},{"location":"01_wdh/#mehrfachvererbung","title":"Mehrfachvererbung","text":"<p>Mehrfachvererbung bedeutet, dass eine abgeleitete Klasse mehr als eine direkte Basisklasse hat.</p> <pre><code>flowchart BT\n    B --&gt; A\n    C --&gt; A\n    D --&gt; B\n    D --&gt; C</code></pre> <pre><code>class A:\n    pass\n\nclass B(A):\n    pass\n\nclass C(A):\n    pass\n\nclass D(A, B):\n    pass\n</code></pre> <p>Hier erbt <code>D</code> sowohl von <code>B</code> als auch von <code>C</code>.</p>"},{"location":"01_wdh/#diamantproblem","title":"Diamantproblem","text":"<p>Das Diamantproblem (engl. diamond problem) tritt auf, wenn ein Klassen-Vererbungsschema in Form eines \u201eDiamanten\u201c entsteht. Ein typisches Beispiel:</p> <pre><code>classDiagram\n    A &lt;|-- B\n    A &lt;|-- C\n    B &lt;|-- D\n    C &lt;|-- D\n\n    class A {\n        +greet()\n    }\n\n    class B {\n        +greet()\n    }\n\n    class C {\n        +greet()\n    }</code></pre> <p>In Python w\u00fcrde dies wie folgt aussehen.</p> <pre><code>class A:\n    def greet(self) -&gt; None:\n        print(\"Hallo von A\")\n\nclass B(A):\n    def greet(self) -&gt; None:\n        print(\"Hallo von B\")\n\nclass C(A):\n    def greet(self) -&gt; None:\n        print(\"Hallo von C\")\n\nclass D(B, C):\n    pass\n\nd = D()\nd.greet()\n</code></pre> <p>In diesem Fall hat Python mehrere m\u00f6gliche Kandidaten f\u00fcr <code>greet()</code>:</p> <ul> <li> <p><code>B.greet()</code></p> </li> <li> <p><code>C.greet()</code></p> </li> <li> <p>und falls weder in <code>B</code> noch in <code>C</code> etwas gefunden w\u00fcrde, dann <code>A.greet()</code>.</p> </li> </ul>"},{"location":"01_wdh/#mro-method-resolution-order","title":"MRO (Method Resolution Order)","text":"<p>Um Ambiguit\u00e4ten und Mehrfachaufrufe derselben Methode aus derselben Basisklasse zu vermeiden, folgt Python einer klar  definierten Reihenfolge bei der Methodenaufl\u00f6sung. Diese Reihenfolge hei\u00dft MRO (Method Resolution Order).</p> <p>Jede Klasse hat ein Attribut <code>__mro__</code>, in dem die Reihenfolge aufgef\u00fchrt ist:</p> <pre><code>&gt;&gt;&gt; D.__mro__\n(&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class 'object'&gt;)\n</code></pre> <p>Oder man verwendet die Methode <code>mro()</code>:</p> <pre><code>&gt;&gt;&gt; D.mro()\n[&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class 'object'&gt;]\n</code></pre> <p>Die Reihenfolge sagt: 1. Suche zuerst in <code>D</code> selbst. 2. Dann in <code>B</code>. 3. Dann in <code>C</code>. 4. Dann in <code>A</code>. 5. Zum Schluss in <code>object</code> (die Wurzel aller Klassen in Python).</p> <p>Wenn man <code>d.greet()</code> ausf\u00fchrt, sucht Python zun\u00e4chst in <code>D</code> nach <code>greet()</code>. Falls nicht vorhanden, in <code>B</code>, dann in <code>C</code>, dann in <code>A</code>. Da <code>B</code> eine <code>greet()</code>-Methode hat, wird diese verwendet:</p> <pre><code>d = D()\nd.greet()  # Gibt \"Hallo von B\" aus\n</code></pre>"},{"location":"01_wdh/#erklarung-zur-super-methode","title":"Erkl\u00e4rung zur <code>super()</code>-Methode","text":"<p>Die Funktion <code>super()</code> wird in Python verwendet, um auf die Basisklasse zuzugreifen und deren Methoden (insbesondere den Konstruktor) aufzurufen. Dadurch wird sichergestellt, dass alle Eigenschaften und Initialisierungsschritte der Basisklasse korrekt \u00fcbernommen werden. </p> <ul> <li> <p>Verwendung in Konstruktoren:   In abgeleiteten Klassen wird <code>super().__init__()</code> verwendet, um den Konstruktor der Basisklasse auszuf\u00fchren.    Dadurch wird garantiert, dass alle ben\u00f6tigten Attribute aus der Basisklasse initialisiert werden, bevor weitere   Initialisierungsschritte in der abgeleiteten Klasse stattfinden.</p> </li> <li> <p>Method Resolution Order (MRO):   Python benutzt eine sogenannte Method Resolution Order, um zu bestimmen, in welcher Reihenfolge Basisklassen   abgefragt werden, falls eine abgeleitete Klasse mehrfach erbt. <code>super()</code> ber\u00fccksichtigt diese Reihenfolge automatisch   und erleichtert somit das Aufrufen von Basisklassenmethoden in Mehrfachvererbungsszenarien.</p> </li> <li> <p>Vermeidung von doppeltem Code:   Da mit <code>super()</code> auf Methoden der Basisklasse zugegriffen werden kann, l\u00e4sst sich Code-Duplikation vermeiden. Methoden    m\u00fcssen so nicht erneut implementiert oder explizit mit dem Basisklassennamen aufgerufen werden.</p> </li> </ul> <p>Dieses Prinzip erleichtert die Wartung und Erweiterung von Klassenhierarchien erheblich und stellt sicher, dass sowohl die Basisklasse als auch deren abgeleitete Klassen korrekt initialisiert werden.</p> <p>Zu den Aufgaben</p>"},{"location":"02_aufgaben-ac/","title":"abstrakte Klassen","text":"<p>Zur\u00fcck zur Info-Seite</p> <p>L\u00f6se folgende Aufgaben zu abstrakten Klassen:</p> <p>Zur\u00fcck zur Info-Seite</p>"},{"location":"02_aufgaben-sensor/","title":"Aufgaben Sensoranwendung","text":""},{"location":"02_aufgaben-sensor/#aufbau-der-anwendung","title":"Aufbau der Anwendung","text":"<p>Die Anwendung ist nach dem MVC (Model-View-Controller) Muster entwickelt.</p> <p>Im Folgenden ist noch einmal das MVC-Muster dargestellt:</p> <p></p> <p>Das folgende Diagramm zeigt eine \u00dcbersicht zu allen Klassen der Sensor-Anwendung:</p> <p></p>"},{"location":"02_aufgaben-sensor/#dateiarbeit-in-python","title":"Dateiarbeit in Python","text":"<p>In Python gibt es verschiedene M\u00f6glichkeiten, mit Dateien zu arbeiten. Zum Schreiben von Daten in eine Datei verwendet man die Funktion open(), die die Datei \u00f6ffnet, und den Modus w (write) oder a (append). Wenn man den Modus w verwendet, wird die Datei \u00fcberschrieben, w\u00e4hrend bei a neue Daten am Ende der Datei angeh\u00e4ngt werden. Zum Schreiben von Daten wird die Methode write() verwendet.</p> <p>Beispiel:</p> <pre><code># \u00d6ffnet die Datei \"beispiel.txt\" im Schreibmodus ('w')\nwith open(\"beispiel.txt\", \"w\") as file:\n    file.write(\"Hallo, Welt!\")\n</code></pre> <p>In diesem Beispiel:</p> <p>Die with open()-Anweisung \u00f6ffnet die Datei und sorgt daf\u00fcr, dass sie nach dem Schreiben korrekt geschlossen wird. Die file.write()-Methode schreibt den Text \"Hallo, Welt!\" in die Datei.</p>"},{"location":"02_aufgaben-sensor/#aufgabe","title":"Aufgabe","text":"<p>Erstelle eine neue Implementierung des <code>DataStorageInterface</code>.</p> <p>Du ben\u00f6tigst folgende Datei: <code>python-app/src/lf17_sensor/data_storage.py</code></p> <p>Die <code>DataStoragePrinter</code> Klasse gibt die Sensor-Werte der Anwendung aktuell nur auf der Konsole aus. Die neue Klasse soll die Sensor-Werte in eine Datei schreiben. Implementiere die Klasse <code>DataStorageFileWriter</code>, welche anstelle der <code>DataStoragePrinter</code> Klasse verwendet werden soll.</p>"},{"location":"02_aufgaben-sensor/#zusatzaufgabe","title":"Zusatzaufgabe","text":"<p>Erstelle eine neue Implementierung des <code>DataGetter</code>.</p> <p>Nutze folgende API, um anstelle zuf\u00e4lliger Werte echte Wetterdaten zu erhalten: Open-Meteo API</p> <p>Du ben\u00f6tigst folgende Datei: <code>python-app/src/lf17_sensor/data_getter.py</code></p>"},{"location":"02_index/","title":"--> Abituraufgabe","text":"<p>Am Ende dieses Schwerpunkt-Kapitels sollst du die folgende Aufgabe aus der schriftlichen Abiturpr\u00fcfung 2021 Informatiksysteme (15.0.1E) l\u00f6sen k\u00f6nnen:</p>"},{"location":"02_index/#aufgabe-23-2-be","title":"Aufgabe 2.3  (2 BE)","text":"<p>Im Modell ist die Klasse Komponente als abstrakt gekennzeichnet.  Erl\u00e4utern Sie das dahinterstehende Konzept und die Folgen f\u00fcr die Instanziierung von Objekten.</p> <p></p>"},{"location":"02_wdh/","title":"Wiederholung","text":""},{"location":"02_wdh/#mvc-controller","title":"MVC-Controller","text":"<p>Das MVC (Model-View-Controller) Muster ist ein Software-Design-Pattern, das in vielen Webanwendungen und Softwarearchitekturen verwendet wird. Der Controller ist eine der zentralen Komponenten dieses Musters und spielt eine wichtige Rolle bei der Verarbeitung von Benutzeranfragen und der Steuerung des Programmlaufs.</p>"},{"location":"02_wdh/#model","title":"Model","text":"<ul> <li>speichert die Anwendungsdaten und den Zustand.</li> <li>stellt Datenstruktur der Anwendung dar</li> <li>entspricht einer oder mehreren Klassen</li> </ul>"},{"location":"02_wdh/#view","title":"View","text":"<ul> <li>empf\u00e4ngt Benutzerinteraktionen (z.B. Klicks, Formulareingaben)</li> <li>gibt eingegebene Daten an den Controller weiter</li> <li>pr\u00e4sentiert die Daten f\u00fcr den Benutzer</li> <li>zeigt eine Benutzeroberfl\u00e4che oder \u00e4hnliches</li> <li>Empfangen von Benutzeraktionen: Der Controller nimmt Anfragen vom Benutzer entgegen (z.B. durch Klicks oder Formulareingaben).</li> </ul>"},{"location":"02_wdh/#aufgaben-des-controllers","title":"Aufgaben des Controllers:","text":"<ul> <li>empf\u00e4ngt Benutzerinteraktionen (z.B. Klicks, Formulareingaben).</li> <li>verarbeitet Eingaben und entscheidet \u00fcber die n\u00e4chste Aktion.</li> <li>ruft Daten vom Model ab oder ver\u00e4ndert diese.</li> <li>\u00fcbergibt die Daten an die View zur Darstellung.</li> <li>kontrolliert den Ablauf der Anwendung und sorgt f\u00fcr die Kommunikation zwischen Model und View.</li> </ul>"},{"location":"02_wdh/#funktionsweise","title":"Funktionsweise:","text":"<ol> <li>Eingabe: Der Controller empf\u00e4ngt eine Anfrage vom View.</li> <li>Verarbeitung: Der Controller kann Daten vom Model abfragen und/oder Modifikationen an ihm vornehmen.</li> <li>Ausgabe: Die View wird mit neuen Daten oder einer Best\u00e4tigung aktualisiert, die dem Benutzer angezeigt werden.</li> </ol> <pre><code>flowchart LR\n    Controller --&gt; |Model| View\n    View --&gt; |Model| Controller</code></pre>"},{"location":"02_wdh/#mvvm-model-view-viewmodel","title":"MVVM - Model-View-ViewModel","text":"<p>Funktioniert \u00e4hnlich wie MVC, aber mit einer zus\u00e4tzlichen Schicht, dem ViewModel. Der Controller ist hier meist durch das ViewModel ersetzt. Das MVVM ist dynamischer aufgrund seines eventbasierten Systems.</p> Datenbindung // Events <p>Es gibt wesentliche Unterschiede, wie h\u00e4ufig die Daten vom Model an die View \u00fcbergeben werden:</p> MVC MVVM View muss bei \u00c4nderungen des Models manuell aktualisiert werden. Unterst\u00fctzt zweiwegige Datenbindung, bei der \u00c4nderungen im Modell automatisch in der View angezeigt werden und umgekehrt."},{"location":"02_wdh/#microservices","title":"Microservices:","text":"<pre><code>graph TD\n    Benutzer[Benutzer] --&gt;|Gibt Bestellung auf| Gateway[API-Gateway]\n\n    Gateway --&gt; BenutzerService[Benutzer-Service]\n    Gateway --&gt; ProduktService[Produkt-Service]\n    Gateway --&gt; BestellService[Bestell-Service]\n    Gateway --&gt; ZahlungsService[Zahlungs-Service]\n    Gateway --&gt; BenachrichtigungsService[Benachrichtigungs-Service]\n\n    BenutzerService --&gt;|Auth-Anfrage| AuthDB[(Benutzer-Datenbank)]\n    ProduktService --&gt;|Bestand pr\u00fcfen| ProduktDB[(Produkt-Datenbank)]\n    BestellService --&gt;|Bestellung speichern| BestellDB[(Bestell-Datenbank)]\n    ZahlungsService --&gt;|Zahlung verarbeiten| ZahlungsGateway[Externes Zahlungs-Gateway]\n\n    BestellService --&gt; BenachrichtigungsService\n\n    BenachrichtigungsService --&gt;|Sende E-Mail/SMS| Benutzer\n\n    style Gateway fill:#f9f,stroke:#333,stroke-width:2px</code></pre> <p>Microservices ist ein Softwarearchitekturmuster, bei dem eine riesige Anwendung in kleinere, unabh\u00e4ngige Services aufgeteilt wird, die eine spezifische Funktionalit\u00e4t anbieten. Die einzelnen Microservices k\u00f6nnen untereinander \u00fcber APIs kommunizieren und werden unabh\u00e4ngig voneinander entwickelt und gewartet.</p> <p>Siehe auch: Video (Achtung englischsprachiges Video)</p>"},{"location":"02_wdh/#client-server-architektur","title":"Client-Server-Architektur:","text":"<pre><code>graph LR\n    Client[Client] --&gt;|Sendet Anfrage| Server[Server]\n\n    Server --&gt;|Verarbeitet Anfrage| Datenbank[(Datenbank)]\n\n    Datenbank --&gt;|Gibt Daten zur\u00fcck| Server\n\n    Server --&gt;|Sendet Antwort| Client\n\n    style Client fill:#bbf,stroke:#333,stroke-width:2px\n    style Server fill:#f9f,stroke:#333,stroke-width:2px\n    style Datenbank fill:#bfb,stroke:#333,stroke-width:2px</code></pre> <p>Diese Architektur trennt die Anwendung in zwei Hauptkomponenten: den Client (der die Anfragen stellt) und den Server (der die Anfragen verarbeitet). Dieses Softwarearchitektur-Modell ist beispielsweise bei Webanwendungen zu finden.</p>"},{"location":"03_aufgaben-begriffe/","title":"Aufgaben IT-Sicherheit","text":"<p>Zur\u00fcck zur Info-Seite</p> <p>Zur\u00fcck zur Info-Seite</p>"},{"location":"03_aufgaben-datenschutz/","title":"Aufgaben Datenschutz","text":"<p>Zur\u00fcck zur Info-Seite</p> <p>Zur\u00fcck zur Info-Seite</p>"},{"location":"03_index-auswertung/","title":"Auswertung Abituraufgabe","text":"<p>Am Ende dieses Schwerpunkt-Kapitels sollst du die folgende Aufgabe aus der schriftlichen Abiturpr\u00fcfung 2021 Informatiksysteme (15.0.1E) l\u00f6sen k\u00f6nnen:</p>"},{"location":"03_index-auswertung/#aufgabe-27-2-be","title":"Aufgabe 2.7  (2 BE)","text":"<p>Eine Au\u00dfenkamera soll k\u00fcnftig das Smart-Home-System zum Schutz vor Einbr\u00fcchen erg\u00e4nzen. Die Kamera kann auf bewegte Objekte reagieren und auf dem Grundst\u00fcck sowie im angrenzenden \u00f6ffentlichen Raum filmen.  Bewerten Sie diese Ma\u00dfnahme und gehen Sie auf die betreffenden gesetzlichen Grundlagen ein.</p> <p></p>"},{"location":"03_index-auswertung/#losung-zur-aufgabe-27","title":"L\u00f6sung zur Aufgabe 2.7","text":""},{"location":"03_index-auswertung/#vorteile","title":"Vorteile:","text":"<ul> <li>Abschreckung von Einbrechern</li> <li>Beweissicherung bei Einbruch</li> <li>Alarmierung bei unbefugtem Betreten des Grundst\u00fccks</li> <li>Fernzugriff</li> </ul>"},{"location":"03_index-auswertung/#gesetzliche-grundlagen","title":"Gesetzliche Grundlagen:","text":"<ul> <li>Datenschutzgrundverordnung (DSGVO)</li> </ul>"},{"location":"03_index-auswertung/#bewertung","title":"Bewertung:","text":"<p>Bei Videoaufzeichnung werden personenbezogene Daten (z. B. Gesichter) erhoben. Deshalb gelten folgende Regeln:</p> <ul> <li>Die aufgezeichneten Daten d\u00fcrfen nur solange gespeichert werden, wie es f\u00fcr den Zweck der \u00dcberwachung notwendig ist und sollten innerhalb eines angemessenen Zeitraums gel\u00f6scht werden.</li> <li>grunds\u00e4tzlich nur im Privatgel\u00e4nde erlaubt</li> <li>auf \u00f6ffentlichem Gel\u00e4nde muss die \u00dcberwachung angek\u00fcndigt bzw. ausgeschildert sein</li> <li>nur autorisierte Personen d\u00fcrfen auf die Aufzeichnungen zugreifen</li> </ul>"},{"location":"03_index/","title":"--> Abituraufgabe","text":"<p>Am Ende dieses Schwerpunkt-Kapitels sollst du die folgende Aufgabe aus der schriftlichen Abiturpr\u00fcfung 2021 Informatiksysteme (15.0.1E) l\u00f6sen k\u00f6nnen:</p>"},{"location":"03_index/#aufgabe-27-2-be","title":"Aufgabe 2.7  (2 BE)","text":"<p>Eine Au\u00dfenkamera soll k\u00fcnftig das Smart-Home-System zum Schutz vor Einbr\u00fcchen erg\u00e4nzen. Die Kamera kann auf bewegte Objekte reagieren und auf dem Grundst\u00fcck sowie im angrenzenden \u00f6ffentlichen Raum filmen.  Bewerten Sie diese Ma\u00dfnahme und gehen Sie auf die betreffenden gesetzlichen Grundlagen ein.</p>"},{"location":"03_wdh-begriffe/","title":"Wiederholung Begriffe","text":"<p>Zu den Aufgaben</p>"},{"location":"03_wdh-begriffe/#it-sicherheit-in-bildern","title":"IT-Sicherheit in Bildern","text":""},{"location":"03_wdh-begriffe/#wiederholung-begriffe-zur-it-sicherheit","title":"Wiederholung Begriffe zur IT-Sicherheit","text":""},{"location":"03_wdh-begriffe/#funktionssicherheit-safety","title":"Funktionssicherheit safety","text":"<p>Ein System ist funktionssicher, wenn es unter normalen Betriebsbedingungen die festgelegte Funktionalit\u00e4t bietet. Ein funktionssicheres System f\u00fchrt keine unzul\u00e4ssigen Funktionen aus.</p> Beispiel: Sicherheitskamera <p>Die Kamera:</p> <ul> <li>Muss sicher montiert sein, um St\u00fcrze oder Verletzungen zu vermeiden.</li> <li>Darf keine \u00dcberhitzung oder elektrische Fehler verursachen.</li> <li>Sollte wetterfest sein (bei Au\u00dfeninstallationen), um Sch\u00e4den durch Regen oder Schnee zu verhindern.</li> </ul>"},{"location":"03_wdh-begriffe/#informationssicherheit-security","title":"Informationssicherheit security","text":"<p>Ein funktionssicheres System ist informationssicher, wenn es keine unautorisierten Informationspreisgabe oder -ver\u00e4nderung zul\u00e4sst.</p> Beispiel: Sicherheitskamera <p>Bei der Kamera:</p> <ul> <li>Sollten Video\u00fcbertragungen \u00fcber das Internet verschl\u00fcsselt werden (z. B. mit AES-256) zur Abwehr von Hackerangriffen.</li> <li>Sollte es Zugriffsbeschr\u00e4nkungen geben (z. B. Passwortschutz oder \u00dcberwachung nur in einem abgesperrten Raum).</li> </ul>"},{"location":"03_wdh-begriffe/#datensicherheit-protection","title":"Datensicherheit protection","text":"<p>Ein funktionssicheres System, dass Daten und Systemressourcen vor Verlust und unautorisierten Zugriffen sch\u00fctzt, bietet Datensicherheit. Dazu z\u00e4hlen insbesondere auch Ma\u00dfnahmen zur redundanten Datenspeicherung (backup).</p> Beispiel: Sicherheitskamera <p>Bei der Kamera:</p> <ul> <li>Sollten Backups der Aufnahmen gemacht werden, um Datenverlust zu vermeiden.</li> <li>Sollten gespeicherte Aufnahmen gegegenenfalls verschl\u00fcsselt werden um Datenl\u00f6schung zu verhindern.</li> <li>Sollte es Zugriffsbeschr\u00e4nkungen geben (z. B. Passwortschutz oder \u00dcberwachung nur in einem abgesperrten Raum).</li> </ul>"},{"location":"03_wdh-begriffe/#datenschutz-privacy","title":"Datenschutz privacy","text":"<p>Der Begriff Datenschutz bezeichnet den Schutz vor Informationen, die eine Person betreffen. Gesetzliche Bestimmungen legen Sicherheitsanforderungen fest und regeln das informationelle Selbstbestimmungsrecht.</p> Beispiel: Sicherheitskamera <p>Die Kamera:</p> <ul> <li>Darf nur Bereiche erfassen, die zur \u00dcberwachung zul\u00e4ssig sind (z. B. kein \u00f6ffentlicher Raum oder Nachbargrundst\u00fccke).</li> <li>Andernfalls muss es bei \u00f6ffentlichem Raum eine klare Kennzeichnung der Video\u00fcberwachung geben (z. B. Hinweisschilder gem\u00e4\u00df DSGVO).</li> <li>Sollte eine Anonymisierungsfunktion (z. B. Maskierung von sensiblen Bereichen) haben.</li> </ul>"},{"location":"03_wdh-begriffe/#verlasslichkeit-dependability","title":"Verl\u00e4sslichkeit dependability","text":"<p>Ein verl\u00e4ssliches System f\u00fchrt keine unzul\u00e4ssigen Funktionen aus (Funktionssicherheit) und erbringt die festgelegten Funktionen zuverl\u00e4ssig (reliability).</p> Beispiel: Sicherheitskamera <p>Die Kamera:</p> <ul> <li>Sollte auch bei schlechten Lichtverh\u00e4ltnissen oder Ausfall der Internetverbindung zuverl\u00e4ssig funktionieren.</li> <li>Muss eine stabile Stromversorgung oder Akkureserve bieten.</li> <li>Sollte Fehlermeldungen oder Systemausf\u00e4lle automatisch erkennen und melden.</li> <li>Muss eine konstante Aufzeichnungsqualit\u00e4t ohne Bildausf\u00e4lle sicherstellen.</li> </ul>"},{"location":"03_wdh-begriffe/#beherrschbarkeit-controllability","title":"Beherrschbarkeit controllability","text":"<p>Keine unzul\u00e4ssigen Beeintr\u00e4chtigung von Rechten oder schutzw\u00fcrdigen Belangen der Betroffenen durch Vorhandensein oder Nutzung von IT-Systemen. (Sicherheit vor dem System).</p> Beispiel: Sicherheitskamera <p>Bei der Kamera sollte es beispielsweise folgende Funktionen geben:</p> <ul> <li>Bedienung \u00fcber eine benutzerfreundliche Oberfl\u00e4che (z. B. Webinterface oder App).</li> <li>einfache Konfiguration (bspw. von Aufnahmezeiten und -bereichen)</li> </ul>"},{"location":"03_wdh-begriffe/#basisschutzziele","title":"Basisschutzziele","text":""},{"location":"03_wdh-begriffe/#vertraulichkeit-confidentiality","title":"Vertraulichkeit confidentiality","text":"<p>Daten d\u00fcrfen nur von den Personen eingesehen oder offengelegt werden, die dazu auch berechtigt sind. Dazu geh\u00f6rt auch die Daten\u00fcbertragung. Beinhaltet alle Ma\u00dfnahmen zum Zugriffsschutz. </p>"},{"location":"03_wdh-begriffe/#integritat-integrity","title":"Integrit\u00e4t integrity","text":"<p>Daten d\u00fcrfen nicht unerkannt bzw. unbemerkt ver\u00e4ndert werden. Beinhaltet alle Ma\u00dfnahmen zum Bestandsschutz.</p>"},{"location":"03_wdh-begriffe/#verfugbarkeit-availability","title":"Verf\u00fcgbarkeit availability","text":"<p>Beschreibt die Zeit, in der das System funktioniert bzw. es die erforderlichen Daten und Funktionen bereitstellt. Beinhaltet alle Ma\u00dfnahmen zum Ausfallschutz.</p>"},{"location":"03_wdh-begriffe/#erweiterte-schutzziele","title":"erweiterte Schutzziele","text":""},{"location":"03_wdh-begriffe/#verbindlichkeit-reliability","title":"Verbindlichkeit reliability","text":"<p>Es darf nicht m\u00f6glich sein, ausgef\u00fchrte Handlungen abzustreiten.</p>"},{"location":"03_wdh-begriffe/#zurechenbarkeit-imputability","title":"Zurechenbarkeit imputability","text":"<p>Es muss m\u00f6glich sein, Handlungen eindeutig dem zuzuordnen, der sie ausgef\u00fchrt hat.</p>"},{"location":"03_wdh-begriffe/#authentizitat-authenticity","title":"Authentizit\u00e4t authenticity","text":"<p>Es muss die Echtheit (bzw. Vertrauensw\u00fcrdigkeit) der Datenverarbeitenden Person/des Systems gew\u00e4hrleistet werden. Autorisierung ist die \u00dcberpr\u00fcfung der Authentizit\u00e4t.</p> <p>Zu den Aufgaben</p>"},{"location":"03_wdh-datenschutz/","title":"Datenschutz","text":"<p>Zu den Aufgaben</p>"},{"location":"03_wdh-datenschutz/#gegenstand-was-ist-damit-gemeint","title":"Gegenstand (Was ist damit gemeint)","text":"<ul> <li>personenbezogene Daten</li> <li>bspw.: Gr\u00f6\u00dfe, Vorname, Nachname, Geburtsdatum, Augenfarbe, Anschrift, ID, Geschlecht, E-Mail-Adresse, Telefonnummer</li> </ul>"},{"location":"03_wdh-datenschutz/#rechtsgrundlagen","title":"Rechtsgrundlagen","text":"<ul> <li>Verarbeitung nur durch befugte \u00f6ffentliche Stelle (Beh\u00f6rde) zul\u00e4ssig, wenn Daten gebraucht werden</li> </ul>"},{"location":"03_wdh-datenschutz/#verarbeitungsgrundsatze","title":"Verarbeitungsgrunds\u00e4tze","text":"<ul> <li>d\u00fcrfen nur f\u00fcr nachvollziehbaren Zweck verarbeitet werden</li> <li>auf die zur Verarbeitung notwendigen Daten und die notwendige Dauer beschr\u00e4nkt (nicht ewig)</li> </ul>"},{"location":"03_wdh-datenschutz/#rechte-der-betroffenen","title":"Rechte der Betroffenen","text":"<ul> <li>d\u00fcrfen Datenl\u00f6schung beantragen</li> <li>d\u00fcrfen Dateneinforderungen beantragen (welche Daten der Anbieter \u00fcber einen selber gespeichert hat)</li> </ul>"},{"location":"03_wdh-datenschutz/#pflichten-der-verantwortlichen","title":"Pflichten der Verantwortlichen","text":"<ul> <li>m\u00fcssen Datenl\u00f6schungen und Einforderungen nachgehen</li> </ul> <p>Zu den Aufgaben</p>"},{"location":"03_wdh-grundlagen/","title":"Standards und Gesetze","text":""},{"location":"03_wdh-grundlagen/#gesetzliche-grundlagen","title":"gesetzliche Grundlagen","text":""},{"location":"03_wdh-grundlagen/#it-sicherheitsgesetz","title":"IT-Sicherheitsgesetz","text":"<ul> <li>fokus auf KRITIS (Betreiber kritischer Infrastrukturen)</li> <li>verpflichtet Implementierung von Mindeststandards f\u00fcr IT-Sicherheit</li> <li>verpflichtet zur Meldung von Sicherheitsvorf\u00e4llen</li> </ul>"},{"location":"03_wdh-grundlagen/#bsi-gesetz","title":"BSI-Gesetz","text":"<ul> <li>regelt, welche Aufgaben das Bundesamt f\u00fcr Sicherheit in der Informationstechnik hat</li> </ul>"},{"location":"03_wdh-grundlagen/#eu-datenschutzgrundverordnung-dsgvo","title":"EU-Datenschutzgrundverordnung (DSGVO)","text":"<ul> <li>regelt den Umgang mit personenbezogenen Daten in der EU</li> </ul>"},{"location":"03_wdh-grundlagen/#bundesdatenschutzgesetz-bdsg-neu","title":"Bundesdatenschutzgesetz (BDSG neu)","text":"<ul> <li>Regelungen auf nationaler Ebene zum Datenschutz</li> <li>bspw. zu Datenschutzbeauftragen und Verarbeitung von Mitarbeiterdaten</li> </ul>"},{"location":"03_wdh-grundlagen/#standards-zertifikate","title":"standards + Zertifikate","text":""},{"location":"03_wdh-grundlagen/#bsi-standards","title":"BSI-Standards","text":"<p>Beispiele:</p> <ul> <li>BSI IT-Grundschutz-Kompendium: Dieser Standard gibt spezifische Sicherheitsma\u00dfnahmen vor, wie etwa die Verschl\u00fcsselung von E-Mails und den sicheren Umgang mit Passw\u00f6rtern, um die IT-Systeme eines Unternehmens vor Angriffen zu sch\u00fctzen.</li> <li>BSI-Standard 200-3: Dieser Standard beschreibt detailliert, wie Unternehmen ihr Informationssicherheitsmanagementsystem (ISMS) aufbauen, inklusive der regelm\u00e4\u00dfigen Risikoanalysen und der Dokumentation von Sicherheitsvorkehrungen, wie z.B. dem Schutz vor unbefugtem Zugriff auf Serverr\u00e4ume.</li> <li>BSI-Standard 100-4: Der Standard legt fest, wie Notfallpl\u00e4ne f\u00fcr IT-Systeme aussehen m\u00fcssen, z.B. wie eine schnelle Datenwiederherstellung nach einem Cyberangriff oder einem Stromausfall durchgef\u00fchrt wird, um Ausfallzeiten zu minimieren.</li> </ul>"},{"location":"03_wdh-grundlagen/#isoiec-27001","title":"ISO/IEC 27001","text":"<p>Beispiele:</p> <ul> <li>ISO/IEC 27001:2013: Ein Unternehmen muss Ma\u00dfnahmen wie Zugriffskontrollen auf kritische Daten und eine kontinuierliche \u00dcberwachung der Netzwerkaktivit\u00e4ten umsetzen, um unbefugte Zugriffe auf sensible Informationen zu verhindern.</li> <li>ISO/IEC 27002: Diese Norm legt fest, dass Unternehmen klare Richtlinien zur Passwortsicherheit (z.B. mindestens 12 Zeichen, Mischung aus Zahlen und Sonderzeichen) und zur sicheren Nutzung mobiler Ger\u00e4te (z.B. Verschl\u00fcsselung von Firmendaten auf Smartphones) umsetzen m\u00fcssen.</li> <li>ISO/IEC 27005: Sie hilft Unternehmen, Risiken in ihrer IT-Infrastruktur zu bewerten, etwa wie die Wahrscheinlichkeit eines Datenlecks durch eine unsichere Netzwerkverbindung oder unzureichende Mitarbeiterschulung reduziert werden kann.</li> </ul>"},{"location":"03_wdh-grundlagen/#generell-sind-bugelder-bis-zu-20-millionen-euro-oder-4-des-weltweiten-jahresumsatzes-moglich","title":"Generell sind Bu\u00dfgelder bis zu 20 Millionen Euro oder 4% des weltweiten Jahresumsatzes m\u00f6glich.","text":""},{"location":"04_aufgaben/","title":"Der Software-Prototyp","text":"<p>Zur\u00fcck zur Info-Seite</p> <p>L\u00f6se folgende Aufgaben zum Software-Prototyp:</p> <p>Zur\u00fcck zur Info-Seite</p>"},{"location":"04_index/","title":"--> Abituraufgabe","text":"<p>Am Ende dieses Schwerpunkt-Kapitels sollst du die folgende Aufgabe aus der schriftlichen Abiturpr\u00fcfung 2021 Informatiksysteme (15.0.1E) l\u00f6sen k\u00f6nnen:</p>"},{"location":"04_index/#aufgabe-21-2-be","title":"Aufgabe 2.1  (2 BE)","text":"<p>Erl\u00e4utern Sie den Begriff Prototyp in der Softwareentwicklung und beschreiben Sie seinen Nutzen. Gehen Sie dabei auf zwei Vor- und zwei Nachteile von Prototypen ein.</p>"},{"location":"04_projektierung/","title":"Anleitung zur Projektierung in der Softwareentwicklung","text":"<p>Zu den Aufgaben</p>"},{"location":"04_projektierung/#1-risikoanalyse","title":"1. Risikoanalyse","text":"<ul> <li>Identifikation: Technische, Projektmanagement- und Sicherheitsrisiken.</li> <li>Bewertung: Wahrscheinlichkeit und Auswirkungen jedes Risikos.</li> <li>Ma\u00dfnahmen: Risikominderung durch technische L\u00f6sungen und Managementma\u00dfnahmen.</li> <li>\u00dcberwachung: Kontinuierliche Anpassung w\u00e4hrend der Entwicklung.</li> </ul>"},{"location":"04_projektierung/#2-anforderungsanalyse","title":"2. Anforderungsanalyse","text":"<ul> <li>Stakeholder: Identifikation aller relevanten Stakeholder.</li> <li>Anforderungsbeschaffung: Interviews, Workshops, Prototyping.</li> <li>Kategorisierung: Funktionale und nicht-funktionale Anforderungen.</li> <li>Dokumentation: Klar und pr\u00e4zise formulierte Anforderungen.</li> <li>Validierung: \u00dcberpr\u00fcfung der Anforderungen regelm\u00e4\u00dfig.</li> </ul>"},{"location":"04_projektierung/#3-testung","title":"3. Testung","text":"<ul> <li>Unit-Tests: Teste einzelne Funktionen in Isolation.</li> <li>Integrationstests: \u00dcberpr\u00fcfe die Zusammenarbeit von Modulen.</li> <li>Systemtests: Teste das gesamte System in einer realistischen Umgebung.</li> <li>Akzeptanztests: \u00dcberpr\u00fcfe, ob die Software den Stakeholder-Anforderungen entspricht.</li> <li>Automatisierte Tests: Nutze Test-Frameworks (z.B. JUnit, Selenium).</li> <li>Performance-Tests: Teste Last- und Performancegrenzen.</li> <li>Sicherheitstests: F\u00fchre Penetrationstests durch.</li> </ul>"},{"location":"04_projektierung/#4-technische-schuld","title":"4. Technische Schuld","text":"<ul> <li>Erkennung: Identifiziere suboptimale Codebereiche.</li> <li>Bewertung: Beurteile die Schwere der technischen Schuld.</li> <li>Management: Plane Refactoring und Wartungsma\u00dfnahmen.</li> <li>Vermeidung: Setze auf saubere Codepraktiken und regelm\u00e4\u00dfige Refaktorisierung.</li> <li>Kommunikation: Achte darauf, dass alle Stakeholder den Einfluss verstehen.</li> </ul> <p>Zu den Aufgaben</p>"},{"location":"05_aufgabe-2.2/","title":"05 aufgabe 2.2","text":""},{"location":"ablauf/","title":"Ablauf","text":""}]}